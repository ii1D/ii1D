<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Inventory Tracker</title>
    <script src="https://cdn.tailwindcss.com"></script>
</head>
<body class="bg-gray-100 min-h-screen flex flex-col">
    <div class="container mx-auto p-4 max-w-4xl">
        <h1 class="text-3xl font-bold text-center mb-6">Inventory Tracker</h1>
        
        <!-- Form to Add/Edit Items -->
        <div class="bg-white p-6 rounded-lg shadow-md mb-6">
            <h2 class="text-xl font-semibold mb-4">Add New Item</h2>
            <div class="flex flex-col sm:flex-row gap-4">
                <input id="itemName" type="text" placeholder="Item Name" class="border p-2 rounded w-full" required>
                <input id="itemQuantity" type="number" placeholder="Quantity" min="0" class="border p-2 rounded w-full" required>
                <input id="itemPrice" type="number" placeholder="Price" min="0" step="0.01" class="border p-2 rounded w-full" required>
                <button id="addItemBtn" class="bg-blue-500 text-white p-2 rounded hover:bg-blue-600">Add Item</button>
                <button id="updateItemBtn" class="hidden bg-green-500 text-white p-2 rounded hover:bg-green-600">Update Item</button>
                <button id="cancelEditBtn" class="hidden bg-gray-500 text-white p-2 rounded hover:bg-gray-600">Cancel</button>
            </div>
            <p id="errorMessage" class="text-red-500 mt-2 hidden"></p>
        </div>

        <!-- Inventory Table -->
        <div class="bg-white p-6 rounded-lg shadow-md">
            <h2 class="text-xl font-semibold mb-4">Inventory List</h2>
            <table class="w-full border-collapse">
                <thead>
                    <tr class="bg-gray-200">
                        <th class="border p-2 text-left">Item Name</th>
                        <th class="border p-2 text-left">Quantity</th>
                        <th class="border p-2 text-left">Price</th>
                        <th class="border p-2 text-left">Total</th>
                        <th class="border p-2 text-left">Actions</th>
                    </tr>
                </thead>
                <tbody id="inventoryTable"></tbody>
            </table>
        </div>
    </div>

    <script>
        let inventory = JSON.parse(localStorage.getItem('inventory')) || [];
        let editIndex = -1;

        // Load inventory on page load
        document.addEventListener('DOMContentLoaded', () => {
            renderInventory();
        });

        // Add or Update Item
        document.getElementById('addItemBtn').addEventListener('click', () => {
            const name = document.getElementById('itemName').value.trim();
            const quantity = parseInt(document.getElementById('itemQuantity').value);
            const price = parseFloat(document.getElementById('itemPrice').value);
            const errorMessage = document.getElementById('errorMessage');

            if (!name || isNaN(quantity) || quantity < 0 || isNaN(price) || price < 0) {
                errorMessage.textContent = 'Please fill all fields with valid values.';
                errorMessage.classList.remove('hidden');
                return;
            }

            errorMessage.classList.add('hidden');

            if (editIndex === -1) {
                // Add new item
                inventory.push({ name, quantity, price });
            } else {
                // Update existing item
                inventory[editIndex] = { name, quantity, price };
                resetForm();
            }

            saveInventory();
            renderInventory();
            clearForm();
        });

        // Cancel Edit
        document.getElementById('cancelEditBtn').addEventListener('click', () => {
            resetForm();
            clearForm();
        });

        // Save to localStorage
        function saveInventory() {
            localStorage.setItem('inventory', JSON.stringify(inventory));
        }

        // Render Inventory Table
        function renderInventory() {
            const tableBody = document.getElementById('inventoryTable');
            tableBody.innerHTML = '';

            inventory.forEach((item, index) => {
                const row = document.createElement('tr');
                row.innerHTML = `
                    <td class="border p-2">${item.name}</td>
                    <td class="border p-2">${item.quantity}</td>
                    <td class="border p-2">$${item.price.toFixed(2)}</td>
                    <td class="border p-2">$${(item.quantity * item.price).toFixed(2)}</td>
                    <td class="border p-2">
                        <button class="bg-yellow-500 text-white p-1 rounded hover:bg-yellow-600 edit-btn" data-index="${index}">Edit</button>
                        <button class="bg-red-500 text-white p-1 rounded hover:bg-red-600 delete-btn" data-index="${index}">Delete</button>
                    </td>
                `;
                tableBody.appendChild(row);
            });

            // Add event listeners for edit and delete buttons
            document.querySelectorAll('.edit-btn').forEach(btn => {
                btn.addEventListener('click', (e) => {
                    const index = e.target.dataset.index;
                    editItem(index);
                });
            });

            document.querySelectorAll('.delete-btn').forEach(btn => {
                btn.addEventListener('click', (e) => {
                    const index = e.target.dataset.index;
                    deleteItem(index);
                });
            });
        }

        // Edit Item
        function editItem(index) {
            editIndex = index;
            const item = inventory[index];
            document.getElementById('itemName').value = item.name;
            document.getElementById('itemQuantity').value = item.quantity;
            document.getElementById('itemPrice').value = item.price;
            document.getElementById('addItemBtn').classList.add('hidden');
            document.getElementById('updateItemBtn').classList.remove('hidden');
            document.getElementById('cancelEditBtn').classList.remove('hidden');
        }

        // Delete Item
        function deleteItem(index) {
            inventory.splice(index, 1);
            saveInventory();
            renderInventory();
        }

        // Clear Form
        function clearForm() {
            document.getElementById('itemName').value = '';
            document.getElementById('itemQuantity').value = '';
            document.getElementById('itemPrice').value = '';
            document.getElementById('errorMessage').classList.add('hidden');
        }

        // Reset Form to Add Mode
        function resetForm() {
            editIndex = -1;
            document.getElementById('addItemBtn').classList.remove('hidden');
            document.getElementById('updateItemBtn').classList.add('hidden');
            document.getElementById('cancelEditBtn').classList.add('hidden');
        }
    </script>
</body>
</html>
